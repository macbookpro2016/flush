package medium;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @description:
 * 字符串转换整数
 * 请你来实现一个?atoi?函数，使其能将字符串转换成整数。
 *
 * 首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：
 *
 * 如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。
 * 假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。
 * 该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。
 * 注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。
 *
 * 在任何情况下，若函数不能进行有效的转换时，请返回 0 。
 *
 * 提示：
 *
 * 本题中的空白字符只包括空格字符 ' ' 。
 * 假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为?[?231,? 231?? 1]。如果数值超过这个范围，请返回 ?INT_MAX (231?? 1) 或?INT_MIN (?231) 。
 *
 * @author: mskj-fengzhihang
 * @create: 2020-08-11 17:23
 **/
public class ZhuanHuanZhengShu {

    public static int solution(String str){
        if(str==null || str.length()<=0) return 0;
        //正负数的最大最小值
        int MAX=Integer.MAX_VALUE,MIN=Integer.MIN_VALUE;
        int res=0,index=0;
        //过滤空格
        while(index<str.length()&&str.charAt(index)==' ')index++;
        if(index==str.length()) return 0;
        //取正负号
        char firstChar=str.charAt(index);
        boolean positive=true;
        if(!isDigit(firstChar)){
            if(firstChar!='+'&&firstChar!='-') return 0;
            index++;
            positive = firstChar!='-';
        }
        //用负数保存正负数的边界，这样不会溢出
        //正数 -2147483647
        //负数 -2147483648
        int limit=positive?-MAX:MIN;
        //过滤0
        while(index<str.length()&&str.charAt(index)=='0')index++;
        //取每一位,在非字符截止
        while(index<str.length()&&isDigit(str.charAt(index))){
            int digit=str.charAt(index++)-'0';
            if(res<(limit+digit)/10){
                return positive?MAX:MIN;
            }
            //这里的res>=limit
            res=res*10-digit; //用减法
        }
        return positive?-res:res;
    }

    public static boolean isDigit(char c){
        return c>='0' && c<='9';
    }

    public static void main(String[] args) {
        System.out.println(solution("+21321"));
    }

}